import logging

import requests
import telegram
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from config import BOT_TOKEN
from data.category import Category
from data.questions import Question
from data import db_session
from data.participants import Participant
from data.questions import Question
import random

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)
AMOUNT = 10
Y_MAPS_SERVER = 'http://static-maps.yandex.ru/1.x/'


# –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞:
async def start(update, context):
    context.user_data['used_questions'] = []
    db_sess = db_session.create_session()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–¥:
    if not db_sess.query(Participant).filter(Participant.user_id == int(update.effective_user.id)).all():
        participant = Participant()
        if update.effective_user.last_name:
            participant.name = update.effective_user.first_name + ' ' + update.effective_user.last_name
        else:
            participant.name = update.effective_user.first_name
        participant.username = update.effective_user.username
        participant.score = 0
        participant.user_id = update.effective_user.id

        db_sess.add(participant)
        db_sess.commit()
        db_sess.close()

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    reply_keyboard = ReplyKeyboardMarkup([['/game', '/categories', '/statistic', '/help', '/add']], resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –ö–æ—Ç –°–µ–º—ë–Ω üò∫, –∏ —Å–µ–≥–æ–¥–Ω—è —è –±—É–¥—É –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¥–ª—è –≤–∞—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –ú—É—Ä–º–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.\n\n\n"
        f"–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π —ç–∫—Å–∫—É—Ä—Å –ø–æ —Ç–æ–º—É, —á—Ç–æ —è —É–º–µ—é:\n\n"
        f"/start - –ø–æ–∑–¥–æ—Ä–æ–≤–∞—é—Å—å —Å –≤–∞–º–∏ –µ—â–µ —Ä–∞–∑üòä.\n"
        f"{'-' * 100}\n"
        f"/game - –Ω–∞—á–Ω—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–∑ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–º–µ—é—â–∏—Ö—Å—è —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        f"{'-' * 100}\n"
        f"/categories - –Ω–∞—á–Ω—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –í—ã –≤—ã–±–µ—Ä–∏—Ç–µ.\n"
        f"{'-' * 100}\n"
        f"/statistic - –ø–æ–∫–∞–∂—É —Å–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –∏ –Ω–∞ –∫–∞–∫–æ–º –≤—ã –º–µ—Å—Ç–µ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        f"{'-' * 100}\n"
        f"/help - –≤—ã–≤–µ–¥—É –ª–æ–≥–∏–Ω—ã —Ç–µ—Ö, –∫—Ç–æ –º–µ–Ω—è —Å–æ–∑–¥–∞–ª, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –ø–∏—à–∏—Ç–µ –∏–º.\n"
        f"{'-' * 100}\n"
        f"/add - –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –∏–¥–µ—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É, –Ω–∞—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –µ—ë –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –¥–æ–±–∞–≤—è—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        reply_markup=reply_keyboard
    )


# –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
async def game(update, context):
    # –£–∑–Ω–∞–µ–º –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞—Ä—É—é
    info = update.message.text
    if info == '–î–∞, –¥–∞–≤–∞–π—Ç–µ –¥–∞–ª—å—à–µ' or info == '/game':
        try:
            if not context.user_data['true_answer']:
                context.user_data['used_questions'] = []
                context.user_data['category'] = None
                context.user_data['points'] = 0
        except KeyError:
            context.user_data['used_questions'] = []
            context.user_data['category'] = None
            context.user_data['points'] = 0

        # –î–æ—Å—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã
        db_sess = db_session.create_session()

        questions = [*map(lambda x: {
            'id': int(x.id),
            'text': str(x.text),
            'corr_answer': str(x.correct_answer),
            'oth_answers': str(x.other_answers),
            'attachment': str(x.attachment)
        }, db_sess.query(Question).filter(Question.id.notin_(context.user_data['used_questions'])).all())]
        try:
            question = random.choice(questions)
        except IndexError:
            await update.message.reply_text('–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!',
                                            reply_markup=ReplyKeyboardMarkup(
                                                [['/game', '/categories', '/statistic', '/help']]))
            if not context.user_data['category']:

                return 'game'
            else:
                return 'categories_game'

        context.user_data['cor_answer'] = question['corr_answer']
        context.user_data['used_questions'].append(question['id'])

        text = question['text']
        answers = question['oth_answers'][:-1].split('; ')
        answers.append(question['corr_answer'])
        random.shuffle(answers)

        markup = ReplyKeyboardMarkup([answers[0:2], answers[2:]], resize_keyboard=True)

        if question['attachment'].startswith('data'):  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫ –≤–æ–ø—Ä–æ—Å—É
            photo = question['attachment']
        else:
            # –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º yandex.maps api
            map_params = {
                "ll": question['attachment'],
                "l": 'sat',
                'pt': f'{question["attachment"]},pm2ywm',
                'z': 16
            }
            response = requests.get(Y_MAPS_SERVER, params=map_params)
            photo = response.content
        await update.message.reply_photo(caption=f'–í–æ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n'
                                                 f'‚ùì{text}\n\n'
                                                 f'üìö–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                                         reply_markup=markup,
                                         photo=photo)
        return 'results'
    else:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        db_sess = db_session.create_session()
        db_sess.query(Participant).filter(Participant.user_id == str(update.effective_user.id)).first().score += \
            context.user_data['points']
        db_sess.commit()
        context.user_data.clear()
        await update.message.reply_text('–ñ–µ–ª–∞—é –≤–∞–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ!', reply_markup=ReplyKeyboardMarkup(
            [['/game', '/categories', '/statistic', '/help']], resize_keyboard=True))
        return ConversationHandler.END


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
async def results(update, context):
    cor_answer = context.user_data['cor_answer']
    if update.message.text == cor_answer:
        context.user_data['true_answer'] = True
        context.user_data['points'] += context.user_data['points'] + 1
        await update.message.reply_text(f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n'
                                        f'–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —É–∂–µ {context.user_data["points"]} –æ—á–∫–æ–≤!\n\n'
                                        f'–ú—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, '
                                        f'–∏ —Å—É–º–º–∞—Ä–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, –Ω–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ '
                                        f'–≤–∞–º –Ω–∞—á–∏—Å–ª–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 –±–∞–ª–ª.',
                                        reply_markup=ReplyKeyboardMarkup([['–î–∞, –¥–∞–≤–∞–π—Ç–µ –¥–∞–ª—å—à–µ',
                                                                           '–ù–µ—Ç, —è –ø–æ–∂–∞–ª—É–π –æ—Å—Ç–∞–Ω–æ–≤–ª—é—Å—å']]))
        if not context.user_data['category']:

            return 'game'
        else:
            return 'categories_game'
    else:
        # –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º conv_handler
        try:
            db_sess = db_session.create_session()
            if context.user_data['true_answer']:
                db_sess.query(Participant).filter(
                    Participant.user_id == str(update.effective_user.id)).first().score += 1
            db_sess.commit()
        except KeyError:
            pass
        context.user_data.clear()
        await update.message.reply_text(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏.\n\n'
                                        f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {cor_answer}',
                                        reply_markup=ReplyKeyboardMarkup(
                                            [['/game', '/categories', '/statistic', '/help']], resize_keyboard=True))
        return ConversationHandler.END


# –∫–≤–∏–∑ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
async def categories_game(update, context):
    db_sess = db_session.create_session()
    info = update.message.text
    print(info)
    if info == '–î–∞, –¥–∞–≤–∞–π—Ç–µ –¥–∞–ª—å—à–µ' or info in context.user_data['categors']:
        try:
            if not context.user_data['true_answer']:
                context.user_data['used_questions'] = []
                context.user_data['category'] = db_sess.query(Category).filter(
                    Category.title == str(update.message.text)).first().id
                context.user_data['points'] = 0
        except KeyError:
            context.user_data['used_questions'] = []
            context.user_data['category'] = db_sess.query(Category).filter(
                Category.title == str(update.message.text)).first().id
            context.user_data['points'] = 0

        questions = [*map(lambda x: {
            'id': int(x.id),
            'text': str(x.text),
            'corr_answer': str(x.correct_answer),
            'oth_answers': str(x.other_answers),
            'attachment': str(x.attachment)
        }, db_sess.query(Question).filter(Question.category_id == int(context.user_data['category']),
                                          Question.id.notin_(context.user_data['used_questions'])).all())]
        try:
            question = random.choice(questions)
        except IndexError:
            # –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await update.message.reply_text('–£ –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!',
                                            reply_markup=ReplyKeyboardMarkup(
                                                [['/game', '/categories', '/statistic', '/help']]))
            if not context.user_data['category']:

                return 'game'
            else:
                return 'categories_game'

        context.user_data['cor_answer'] = question['corr_answer']
        context.user_data['used_questions'].append(question['id'])

        text = question['text']
        answers = question['oth_answers'][:-1].split('; ')
        answers.append(question['corr_answer'])
        random.shuffle(answers)

        markup = ReplyKeyboardMarkup([answers[0:2], answers[2:]], resize_keyboard=True)

        if question['attachment'].startswith('data'):  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∫ –≤–æ–ø—Ä–æ—Å—É
            photo = question['attachment']
        else:
            # –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            map_params = {
                "ll": question['attachment'],
                "l": 'sat',
                'pt': f'{question["attachment"]},pm2ywm',
                'z': 16
            }
            response = requests.get(Y_MAPS_SERVER, params=map_params)
            photo = response.content
        await update.message.reply_photo(caption=f'–í–æ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n'
                                                 f'‚ùì{text}\n\n'
                                                 f'üìö–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                                         reply_markup=markup,
                                         photo=photo)
        return 'results'
    else:
        try:
            db_sess = db_session.create_session()
            if context.user_data['true_answer']:
                db_sess.query(Participant).filter(Participant.user_id == str(update.effective_user.id)).first().score += \
                    context.user_data['points']
            db_sess.commit()
        except KeyError:
            pass
        await update.message.reply_text('–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è', reply_markup=ReplyKeyboardMarkup(
            [['/game', '/categories', '/statistic', '/help']], resize_keyboard=True))
        context.user_data.clear()
        return ConversationHandler.END


# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def categories(update, context):
    db_sess = db_session.create_session()
    context.user_data['categors'] = [str(x) for x in db_sess.query(Category).all()]
    db_sess.close()
    await update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                                    reply_markup=ReplyKeyboardMarkup([context.user_data['categors'][0:2],
                                                                      context.user_data['categors'][2:4],
                                                                      [context.user_data['categors'][-1]]],
                                                                     one_time_keyboard=False), quote=False)
    return 'categories_game'


async def cat_fork(update, context):
    if update.message.text == '–î–∞, –¥–∞–≤–∞–π—Ç–µ –¥–∞–ª—å—à–µ':
        return 'categories_game'
    else:
        # –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º conv_handler:
        db_sess = db_session.create_session()
        db_sess.query(Participant).filter(Participant.user_id == str(update.effective_user.id)).first().score += \
            context.user_data["points"]
        db_sess.commit()
        context.user_data.clear()
        return ConversationHandler.END


# –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
async def stat(update, context):
    db_sess = db_session.create_session()
    result = db_sess.query(Participant).order_by(Participant.score.desc()).all()
    msg = f'–†–µ–π—Ç–∏–Ω–≥:\n\n' \
          f'–¢–æ–ø 5:\n'
    for i in range(5):
        user = result[i]
        msg += f'{i + 1}: {user.name} (@{user.username}) - {user.score}\n'
    msg += '\n–í–∞—à–µ –º–µ—Å—Ç–æ:\n'
    curr_user = db_sess.query(Participant).filter(Participant.user_id == int(update.effective_user.id)).first()
    msg += f'{result.index(curr_user) + 1}: {curr_user.name} (@{curr_user.username}) - {curr_user.score}'
    await update.message.reply_text(msg)


# —Ç–≥ –∞–∫–∫–∞—É–Ω—Ç—ã –∞–≤—Ç–æ—Ä–æ–≤
async def help_command(update, context):
    await update.message.reply_text("""–í–æ—Ç –º–æ–∏ –∞–≤—Ç–æ—Ä—ã:
@Gentlem4n_2940 - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î–µ—Å—è—Ç–æ–≤—Å–∫–∏–π
@Carkazmic - –ê—Ä—Ç—ë–º –Ø—Å–∫–æ–≤
@i_am_sashaa - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –î–µ—Ä–º–µ–ª—ë–≤–∞""")


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def add(update, context):
    await update.message.reply_text(f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤: '
                                    f'http://aleksandra.pythonanywhere.com/db_mod \n\n'
                                    f'–ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞–º–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ–π–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, —Ç–æ –æ–Ω –≤—Å–∫–æ—Ä–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ')


# –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def stop(update, context):
    await update.message.reply_text(reply_markup=ReplyKeyboardMarkup([['/game',
                                                                       '/categories',
                                                                       '/statistic',
                                                                       '/help',
                                                                       '/start']],
                                                                     resize_keyboard=True))
    return ConversationHandler.END


def main():
    db_session.global_init("rating/rating.db")
    application = Application.builder().token(BOT_TOKEN).build()

    # –∫–≤–∏–∑ —Å–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    normal_game_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('game', game)],

        states={
            'game': [MessageHandler(filters.TEXT & ~filters.COMMAND, game)],
            'results': [MessageHandler(filters.TEXT & ~filters.COMMAND, results)],
        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
        fallbacks=[CommandHandler('stop', stop)]
    )

    # –∫–≤–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_game_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('categories', categories)],

        states={
            'categories': [MessageHandler(filters.TEXT & ~filters.COMMAND, categories)],
            'categories_game': [MessageHandler(filters.TEXT & ~filters.COMMAND, categories_game)],
            'results': [MessageHandler(filters.TEXT & ~filters.COMMAND, results)],
            'categories_fork': [MessageHandler(filters.TEXT & ~filters.COMMAND, cat_fork)]
        },

        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(categories_game_conv_handler)
    application.add_handler(normal_game_conv_handler)
    application.add_handler(CommandHandler('add', add))
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler('statistic', stat))
    application.run_polling()


if __name__ == '__main__':
    main()
